#!/usr/bin/env bash
set -euo pipefail
shopt -s expand_aliases

# XXX work in progress
cd "$(dirname "${BASH_SOURCE[0]}")/.."

# config
ARCH=${ARCH:-x86_64-unknown-linux-gnu}
FLAVOR=${FLAVOR:-debug}
TEST_SECONDS=${TEST_SECONDS:-60}
CONN_GRAPH_TYPE=${CONN_GRAPH_TYPE:-complete}
RUST_LOG=${RUST_LOG:-info}
DOCKER_CMD=${DOCKER_CMD:-docker}

COORD_PORT=4001
COORD_ADDR="10.1.0.2"
PEER_BEGIN_PORT=5100
IP_RANGE="10.1.1.0/24"
SUBNET="10.1.0.0/16"
GATEWAY="10.1.0.1"

# use Podman if available
if [[ -x $(command -v podman) ]]; then
    echo "*** Using Podman instead of Docker ***"
    alias docker=podman
    DOCKER_CMD=podman
fi

usage() {
    echo "Usage: $0 build [ts] | stop | run <scale-factor> [ts] | clean | watch | ls | rm | cat | cp-coord | wait"
    echo "  ARCH=$ARCH      FLAVOR=$FLAVOR"
    exit 1
}

peer_type_to_img() {
    local peer_type=$1
    if [[ $peer_type = "ts" ]]; then
        echo "cmesh-peer-ts"
    else
        echo "cmesh-peer"
    fi
}

build_coord() {
    # take all args
    local build_args="$1"
    if [[ $FLAVOR = "debug" ]]; then
        # for running perf in container
        echo "--> Building debug coordinator w/ perf support.."
        dockerfile="docker/Dockerfile.profile.coord"
    else
        dockerfile="docker/Dockerfile.coord"
    fi
    pre="$DOCKER_CMD build "
    post=" -t cmesh-coord -f $dockerfile ."
    eval "$pre" "$build_args" "$post"
}

build_peer() {
    local build_args="$1"
    local peer_type="$2"
    local img=$(peer_type_to_img $peer_type)

    # build peer container
    if [[ $peer_type = "ts" ]]; then
        echo "--> Building typescript peer.."
        eval "$DOCKER_CMD build $build_args" "-t $img -f docker/Dockerfile.peer-ts ."
    else
        echo "--> Building rust peer.."
        eval "$DOCKER_CMD build $build_args" "-t $img -f docker/Dockerfile.peer ."
    fi
}

run_coord() {
    local scale=$1
    set -x
    # run privileged if running perf in container
    docker run --privileged \
      -d --rm --name cmesh-coord --label cmesh \
      --network=mesh --ip=$COORD_ADDR \
      -v coord-output:/output \
      -e FLAVOR=$FLAVOR -e RUST_LOG=$RUST_LOG \
    cmesh-coord --bind-addr $COORD_ADDR --bind-port $COORD_PORT --min-peers $scale \
      --test-duration-sec $TEST_SECONDS --connection-graph=$CONN_GRAPH_TYPE \
      --output-dir=/output

    set +x
}

stop_coord() {
    cs=$(docker ps -q -f name=cmesh-coord)
    if [[ -n $cs ]]; then
        docker stop $cs
    fi
}

run_peer() {
    local i=$1
    local beginport=$2
    local endport=$3
    local peer_type=$4
    local coord_addr=$5
    local coord_port=$6
    local rust_log=$7
    local img=$(peer_type_to_img $peer_type)
    set -x
    docker run -d --rm --name cmesh-peer-$i --label cmesh \
      --network=mesh --expose "$beginport-$endport" \
      -v peer-output:/output \
      --log-driver=journald  --log-opt labels=peer-$i \
      -e FLAVOR=$FLAVOR -e RUST_LOG=$rust_log \
      $img --coord-addr $coord_addr --coord-port $coord_port \
      --bind-port $beginport --output-dir=/output --device-name peer$i
    set +x
  }


run_peers() {
    local scale=$1
    local peer_type=$2
    PARALLEL=1
    if [[ -n $PARALLEL ]]; then
        export -f run_peer peer_type_to_img
        time parallel -j 8 'startport=$((5100 + ( {} * 10 ) )); endport=$((startport + 9)); ' \
            'run_peer {} $startport $endport ' $peer_type $COORD_ADDR $COORD_PORT $RUST_LOG ::: \
          $(seq 0 $((scale - 1)))
    else
        block_sz=10
        for (( i = 0; i<scale; i++ )); do
            beginport=$((5100 + ( i * block_sz) ))
            endport=$((beginport + block_sz - 1))
            run_peer $i $beginport $endport $peer_type $COORD_ADDR $COORD_PORT $RUST_LOG
        done
    fi
}

stop_peers() {
    cs=$(docker ps -q -f ancestor=cmesh-peer)
    if [[ -n $cs ]]; then
        docker stop $cs
    fi
}

peer_out_dir() {
    echo $(docker volume inspect peer-output | jq '.[0].Mountpoint' | tr -d '"')
}

coord_out_dir() {
    echo $(docker volume inspect coord-output | jq '.[0].Mountpoint' | tr -d '"')
}

do_run() {
    local scale=$1
    local peer_type=$2
    # create bridge network "mesh"
    docker network inspect mesh >/dev/null 2>&1 || \
    docker network create -d bridge \
      --ip-range $IP_RANGE --subnet $SUBNET --gateway $GATEWAY \
      mesh
    run_coord $scale
    run_peers $scale $peer_type
    volpath=$(peer_out_dir)
    echo "*** Peer output will be in $volpath ***"
    volpath=$(coord_out_dir)
    echo "*** Coordinator output will be in $volpath ***"
}

do_stop() {
    stop_peers || true
    stop_coord || true
    # This will fail sometimes even if there are no containers.
    # For now, restart docker when this happens.
    if ! docker network rm -f mesh ]; then
        echo "Warning: docker network is stuck, restarting docker"
        sudo systemctl restart docker
        sleep 1
    fi
}

do_build() {
    local arch=$1
    local flavor=$2
    local peer_type=$3
    # main
    build_args="--build-arg ARCH=$arch"

    # put shared lib where docker build can find it

    # assert that we can find libdittoffi.so, etc.
    if [[ ! -f "bin/libdittoffi.so" ]]; then
        echo "Error: libdittoffi.so not found in ./bin. Did you run make?"
        exit 1
    fi


    if [[ $flavor = "release" ]]; then
        build_args+=" --build-arg FLAVOR=release"
    fi
    echo "--> build coordinator"
    build_coord "$build_args"
    echo "--> build peer"
    build_peer "$build_args" $peer_type
}

do_clean() {
    do_stop
    # clean up docker disk space
    docker system prune -f
    docker volume rm peer-output || true
    docker volume rm coord-output || true
}

get_rainbow_color() {
    local i=$1
    local rate=0.8
    local red=$(echo "s($rate * $i) * 64 + 192" | bc -l)
    local green=$(echo "s($rate * $i + 2 * 3.14 / 3) * 64 + 192" | bc -l)
    local blue=$(echo "s($rate * $i + 4 * 3.14 / 3) * 64 + 192" | bc -l)
    # as integers
    red=$(echo "($red + 0.5)/1" | bc)
    green=$(echo "($green + 0.5)/1" | bc)
    blue=$(echo "($blue + 0.5)/1" | bc)
    printf "\x1b[38;2;%d;%d;%dm" $red $green $blue
}

do_watch() {
    # store list of all docker container names
    cids=(); names=()
    while read -r line; do
        names+=("$line")
    done <<< $(docker ps -f label=cmesh --format '{{.Names}}')
    while read -r line; do
        cids+=("$line")
    done <<< $(docker ps -q -f label=cmesh)

    # assert both arrays are same length
    if [ -z "$names" ]; then
        echo "No cmesh containers running"
        exit 1
    fi
    n=${#names[@]}
    if [[ n -ne ${#cids[@]} ]]; then
        echo "Error: mismatched container names and ids $n != ${#cids[@]}"
        exit 1
    fi
    uncolor="\x1b[0m"
    cleanup()
    {
        # reset colors
        echo -ne "$uncolor"
        kill "${pids[@]}" 2>/dev/null || true
    }

    trap cleanup EXIT

    for i in $(seq 0 $(( n - 1 ))); do
        local cid=${cids[$i]}
        local name=${names[$i]}
        local color="$(get_rainbow_color $i)"
        echo -e "$color --> watching $name $uncolor$cid"
        (docker logs -f -t --tail=10 "$cid" 2>&1 | sed -e "s/^[^\[]*\[\(.*\)/${color}${name}::\[\1${uncolor}/")&
        pids+=($!)
    done
    wait
}

do_ls() {
    peer_output_fs=$(peer_out_dir)
    echo "Listing peer output dir: $peer_output_fs"
    sudo ls -l $peer_output_fs
    coord_output_fs=$(coord_out_dir)
    echo "Listing coord output dir: $coord_output_fs"
    sudo ls -l $coord_output_fs
}

do_rm() {
    peer_output_fs=$(peer_out_dir)
    echo "Clearing output dir: $peer_output_fs"
    sudo sh -c "rm $peer_output_fs/* || true"
    coord_output_fs=$(coord_out_dir)
    echo "Clearing output dir: $coord_output_fs"
    sudo sh -c "rm $coord_output_fs/* || true"
}

do_cat() {
    peer_output_fs=$(peer_out_dir)
    for f in $(sudo ls -1 $peer_output_fs); do
        echo "# $f"
        sudo cat $peer_output_fs/$f
        echo
    done
}

do_cp_coord() {
    out_dir=$1
    coord_output_fs=$(coord_out_dir)
    mkdir -p $out_dir
    sudo sh -c "cp $coord_output_fs/* $out_dir"
}

do_wait() {
    # wait untill all peers are finished, then kill remaining
    # TODO make coordinator exit automatically
    while [[ -n $(docker ps -q -f ancestor=cmesh-peer) ]]; do
        sleep 2
    done
}


# === main ===

# parse cli args
POSITIONAL_ARGS=()
PEER_TYPE=rust

while [[ $# -gt 0 ]]; do
  case $1 in
    run)
      MODE=run
      if [ -z ${2+x} ] || [[ ! $2 =~ ^-?[0-9]+$ ]]; then
            echo "** Missing scale parameter **"
            usage
      fi
      SCALE=$2
      shift; shift
    if [[ -n ${1+x} ]] && [[ $1 == "ts" ]]; then
          PEER_TYPE=ts
          shift
      fi
      ;;
    build)
      MODE=build
      shift
      if [[ -n ${1+x} ]] && [[ $1 == "ts" ]]; then
          PEER_TYPE=ts
          shift
      fi
      ;;
    stop)
      MODE=stop
      shift # past argument
      ;;
    clean)
      MODE=clean
      shift # past argument
      ;;
    watch)
      MODE=watch
      shift # past argument
      ;;
    ls)
      MODE=ls
      shift # past argument
      ;;
    rm)
      MODE=rm
      shift # past argument
      ;;
    cat)
      MODE=cat
      shift # past argument
      ;;
    cp-coord)
      MODE=cp-coord
      OUT_DIR=$2
      shift; shift
      ;;
    wait)
      MODE=wait
      shift # past argument
      ;;
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

if [ -z ${MODE+x} ] ; then usage; fi

if [[ $MODE == "run" ]]; then
    do_run $SCALE $PEER_TYPE
elif [[ $MODE == "stop" ]]; then
    do_stop
elif [[ $MODE == "build" ]]; then
    do_build $ARCH $FLAVOR $PEER_TYPE
elif [[ $MODE == "clean" ]]; then
    do_clean
elif [[ $MODE == "watch" ]]; then
    do_watch
elif [[ $MODE == "ls" ]]; then
    do_ls
elif [[ $MODE == "rm" ]]; then
    do_rm
elif [[ $MODE == "cat" ]]; then
    do_cat
elif [[ $MODE == "cp-coord" ]]; then
    do_cp_coord $OUT_DIR
elif [[ $MODE == "wait" ]]; then
    do_wait
fi
